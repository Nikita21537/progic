# cython: boundscheck=False
# cython: wraparound=False
# cython: initializedcheck=False
# cython: nonecheck=False

from libc.string cimport memcpy
from libc.stdint cimport uint32_t, uint8_t

# --- Bitwise Rotation Utility ---
cdef inline uint32_t right_rotate(uint32_t value, int shift):
    return (value >> shift) | (value << (32 - shift)) & 0xFFFFFFFF

# --- SHA-256 Implementation (Optimized) ---
cdef class SHA256:
    cdef:
        uint32_t H[8]
        uint8_t buffer[64]
        int buffer_size
        unsigned long long total_length
        uint32_t K[64]

    def __cinit__(self):
        self.H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
                   0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]
        self.buffer_size = 0
        self.total_length = 0
        self.K = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ]

    cpdef update(self, bytes data):
        cdef:
            const uint8_t[:] data_view = data
            int data_len = len(data)
            int i = 0
            int chunk_len

        self.total_length += data_len
        while i < data_len:
            chunk_len = min(64 - self.buffer_size, data_len - i)
            memcpy(self.buffer + self.buffer_size, &data_view[i], chunk_len)
            self.buffer_size += chunk_len
            i += chunk_len
            if self.buffer_size == 64:
                self._process_chunk()
                self.buffer_size = 0

    cdef _process_chunk(self):
        cdef:
            uint32_t w[64]
            uint32_t a, b, c, d, e, f, g, h
            int i
            uint32_t s0, s1, temp1, temp2, S0, S1, maj, ch

        for i in range(16):
            w[i] = (self.buffer[i*4] << 24) | (self.buffer[i*4+1] << 16) | (self.buffer[i*4+2] << 8) | self.buffer[i*4+3]

        for i in range(16, 64):
            s0 = right_rotate(w[i-15], 7) ^ right_rotate(w[i-15], 18) ^ (w[i-15] >> 3)
            s1 = right_rotate(w[i-2], 17) ^ right_rotate(w[i-2], 19) ^ (w[i-2] >> 10)
            w[i] = (w[i-16] + s0 + w[i-7] + s1) & 0xFFFFFFFF

        a, b, c, d, e, f, g, h = self.H

        for i in range(64):
            S1 = right_rotate(e, 6) ^ right_rotate(e, 11) ^ right_rotate(e, 25)
            ch = (e & f) ^ (~e & g)
            temp1 = (h + S1 + ch + self.K[i] + w[i]) & 0xFFFFFFFF
            S0 = right_rotate(a, 2) ^ right_rotate(a, 13) ^ right_rotate(a, 22)
            maj = (a & b) ^ (a & c) ^ (b & c)
            temp2 = (S0 + maj) & 0xFFFFFFFF

            h = g
            g = f
            f = e
            e = (d + temp1) & 0xFFFFFFFF
            d = c
            c = b
            b = a
            a = (temp1 + temp2) & 0xFFFFFFFF

        self.H[0] = (self.H[0] + a) & 0xFFFFFFFF
        self.H[1] = (self.H[1] + b) & 0xFFFFFFFF
        self.H[2] = (self.H[2] + c) & 0xFFFFFFFF
        self.H[3] = (self.H[3] + d) & 0xFFFFFFFF
        self.H[4] = (self.H[4] + e) & 0xFFFFFFFF
        self.H[5] = (self.H[5] + f) & 0xFFFFFFFF
        self.H[6] = (self.H[6] + g) & 0xFFFFFFFF
        self.H[7] = (self.H[7] + h) & 0xFFFFFFFF

    cpdef digest(self):
        cdef:
            uint8_t padding[64]
            int pad_len
            unsigned long long bit_len
            bytes result

        bit_len = self.total_length * 8
        pad_len = 56 - (self.total_length % 64)
        if pad_len < 0:
            pad_len += 64

        self.update(b'\x80' + b'\x00' * (pad_len - 1) + bit_len.to_bytes(8, 'big'))

        result = b''.join([(self.H[i]).to_bytes(4, 'big') for i in range(8)])
        self.__init__()
        return result

# --- Key Derivation ---
cpdef bytes generate_key(bytes password, bytes salt, int iterations=100, int key_length=256):
    cdef:
        bytes key_data = password + salt
        int i
        SHA256 sha

    for _ in range(iterations):
        sha = SHA256()
        sha.update(key_data)
        key_data = sha.digest()

    key = bytearray()
    while len(key) < key_length:
        sha = SHA256()
        sha.update(key_data)
        key_data = sha.digest()
        key.extend(key_data)

    return bytes(key[:key_length])

# --- Fast PRNG ---
cdef class PRNG:
    cdef:
        uint32_t state
        bytearray buffer

    def __cinit__(self, uint32_t seed):
        self.state = seed
        self.buffer = bytearray()

    cdef _generate(self):
        cdef int i
        for i in range(16384):
            self.state = (1664525 * self.state + 1013904223) & 0xFFFFFFFF
            self.buffer.extend(self.state.to_bytes(4, 'little'))

    cpdef bytes rand_bytes(self, int n):
        while len(self.buffer) < n:
            self._generate()
        result = bytes(self.buffer[:n])
        del self.buffer[:n]
        return result

# --- Substitution Boxes ---
S1 = bytes([
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
])
S2 = bytes([255 - i for i in range(256)])

# --- Fast XOR, Substitution, Permutation ---
cpdef bytes xor_bytes(bytes a, bytes b):
    cdef:
        const unsigned char[:] a_view = a
        const unsigned char[:] b_view = b
        bytearray result = bytearray(len(a))
        int i
    for i in range(len(a)):
        result[i] = a_view[i] ^ b_view[i]
    return bytes(result)

cpdef bytes substitution(bytes block, const uint8_t[:] sbox):
    cdef:
        const unsigned char[:] block_view = block
        bytearray result = bytearray(len(block))
        Py_ssize_t i
    for i in range(len(block)):
        result[i] = sbox[block_view[i]]
    return bytes(result)

cpdef bytes permutation(bytes block, const int[:] order):
    cdef:
        const unsigned char[:] block_view = block  # Добавлен const
        bytearray result = bytearray(len(order))
        int i
    for i in range(len(order)):
        result[i] = block_view[order[i]]
    return bytes(result)
# --- Setup.py ---
"""
from distutils.core import setup
from Cython.Build import cythonize

setup(
    ext_modules=cythonize("fast_sha256.pyx"),
)
"""
